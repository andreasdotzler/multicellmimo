[1mdiff --git a/mcm/network_optimization.py b/mcm/network_optimization.py[m
[1mindex c2c40d1..a998f8c 100644[m
[1m--- a/mcm/network_optimization.py[m
[1m+++ b/mcm/network_optimization.py[m
[36m@@ -119,7 +119,7 @@[m [mdef optimize_network_app_network(q_min, q_max, network):[m
         import pytest[m
         #assert 1 / rates + w_min - w_max - weights == pytest.approx(np.zeros(len(q)), rel=1e-2, abs=1e-1)[m
         # TDODO we need to verify the weights here[m
[31m-    [m
[32m+[m
         #assert all(weights @ (A - q.reshape(len(q), 1)) <= 0.001)[m
 [m
         # weights[:10] @ r_m_t[m
[36m@@ -209,12 +209,19 @@[m [mdef timesharing_network(cost_function, users_per_mode_and_transmitter, As, q_min[m
         for transmitter, rates in rates_per_transmitter.items():[m
             alphas[mode][transmitter] = cp.Variable(rates.shape[1], nonneg=True)[m
 [m
[32m+[m
     # TODO we need to replace the user constraints with constraints for c_m_t and return the dual variables[m
     r_constraints = {}[m
[32m+[m[32m    c_m_t = {}[m
[32m+[m[32m    c_m_t_constraints = [][m
     for mode, transmitters_and_users in users_per_mode_and_transmitter.items():[m
[32m+[m[32m        c_m_t[mode] = {}[m
         for transmitter, users in transmitters_and_users.items():[m
[32m+[m[32m            c_m_t[mode][transmitter] = cp.Variable(len(users), nonneg=True)[m
[32m+[m[32m            c_m_t_constraints.append(c_m_t[mode][transmitter] == alphas[mode][transmitter] @ As[mode][transmitter])[m
[32m+[m[32m            r_constraints = {}[m
             for user_index, user in enumerate(users):[m
[31m-                constraint = cp.sum(alphas[mode][transmitter] @ As[mode][transmitter][user_index])[m
[32m+[m[32m                constraint = c_m_t[mode][transmitter][user_index][m
                 if user in r_constraints:[m
                     r_constraints[user] += constraint[m
                 else:[m
